"""
    Fatture in Cloud API v2 - API Reference

    Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  # noqa: E501

    The version of the OpenAPI document: 2.0.9
    Contact: info@fattureincloud.it
    Generated by: https://openapi-generator.tech
"""


from re import M
import unittest
import unittest.mock
import dateutil
import fattureincloud_python_sdk
from fattureincloud_python_sdk.api.taxes_api import TaxesApi
from fattureincloud_python_sdk.model.attachment_data import AttachmentData
from fattureincloud_python_sdk.model.create_f24_response import CreateF24Response
from fattureincloud_python_sdk.model.f24 import F24
from fattureincloud_python_sdk.model.f24_status import F24Status
from fattureincloud_python_sdk.model.get_f24_response import GetF24Response
from fattureincloud_python_sdk.model.list_f24_response import ListF24Response
from fattureincloud_python_sdk.model.modify_f24_response import ModifyF24Response
from fattureincloud_python_sdk.model.payment_account import PaymentAccount
from fattureincloud_python_sdk.model.payment_account_type import PaymentAccountType
from fattureincloud_python_sdk.model.upload_f24_attachment_response import UploadF24AttachmentResponse  # noqa: E501


class TestTaxesApi(unittest.TestCase):
    """TaxesApi unit test stubs"""

    def setUp(self):
        self.api = TaxesApi()
        
        f24 = F24(id=1, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" )

        self.api.create_f24 = unittest.mock.MagicMock(return_value = CreateF24Response(data = f24))
        self.api.delete_f24 = unittest.mock.MagicMock(return_value = "")
        self.api.delete_f24_attachment = unittest.mock.MagicMock(return_value = "")
        self.api.get_f24 = unittest.mock.MagicMock(return_value = GetF24Response(data = f24))
        self.api.list_f24 = unittest.mock.MagicMock(return_value = ListF24Response(data = [f24, f24]))
        self.api.modify_f24 = unittest.mock.MagicMock(return_value = ModifyF24Response(data = f24))
        self.api.upload_f24_attachment = unittest.mock.MagicMock(return_value = UploadF24AttachmentResponse(data = AttachmentData(attachment_token = "aisdfvbgablsiw486r8o3qw36")))

    def tearDown(self):
        pass

    def test_create_f24(self):
        expected = CreateF24Response(data = F24(id=2, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" ) )
        actual = self.api.create_f24(2, None)
        actual.data.id = 2
        assert actual == expected
        self.api.create_f24.assert_called_with(2, None)

    def test_delete_f24(self):
        self.api.delete_f24(12345)
        self.api.delete_f24.assert_called_with(12345)

    def test_delete_f24_attachment(self):
        self.api.delete_f24_attachment(2, 12345)
        self.api.delete_f24_attachment.assert_called_with(2, 12345)

    def test_get_f24(self):
        expected = GetF24Response(data = F24(id=2, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" ) )
        actual = self.api.get_f24(2, 12345)
        actual.data.id = 2
        assert actual == expected
        self.api.get_f24.assert_called_with(2, 12345)

    def test_list_f24(self):
        expected = ListF24Response(data = [F24(id=2, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" ), F24(id=2, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" ) ] )
        actual = self.api.list_f24(2, 12345)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_f24.assert_called_with(2, 12345)

    def test_modify_f24(self):
        expected = ModifyF24Response(data = F24(id=2, due_date=dateutil.parser.parse('2022.01.01').date(), status=F24Status("paid"), payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), amount=300.0, attachment_token="attachment_token_example", description="description_example" ) )
        actual = self.api.modify_f24(2, 12345, None)
        actual.data.id = 2
        assert actual == expected
        self.api.modify_f24.assert_called_with(2, 12345, None)

    def test_upload_f24_attachment(self):
        expected = UploadF24AttachmentResponse(data = AttachmentData(attachment_token = "aisdfvbg222ablsiw486r8o3qw36"))
        actual = self.api.upload_f24_attachment(2)
        actual.data.attachment_token = "aisdfvbg222ablsiw486r8o3qw36"
        assert actual == expected
        self.api.upload_f24_attachment.assert_called_with(2)


if __name__ == '__main__':
    unittest.main()
