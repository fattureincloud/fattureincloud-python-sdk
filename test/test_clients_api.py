"""
    Fatture in Cloud API v2 - API Reference

    Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  # noqa: E501

    The version of the OpenAPI document: 2.0.9
    Contact: info@fattureincloud.it
    Generated by: https://openapi-generator.tech
"""


import unittest
import unittest.mock
import fattureincloud_python_sdk
from fattureincloud_python_sdk.api.clients_api import ClientsApi
from fattureincloud_python_sdk.model.client import Client
from fattureincloud_python_sdk.model.client_type import ClientType
from fattureincloud_python_sdk.model.default_payment_terms_type import DefaultPaymentTermsType
from fattureincloud_python_sdk.model.payment_account import PaymentAccount
from fattureincloud_python_sdk.model.payment_account_type import PaymentAccountType
from fattureincloud_python_sdk.model.payment_method import PaymentMethod
from fattureincloud_python_sdk.model.payment_method_details import PaymentMethodDetails
from fattureincloud_python_sdk.model.payment_method_type import PaymentMethodType
from fattureincloud_python_sdk.model.vat_type import VatType
from fattureincloud_python_sdk.model.create_client_response import CreateClientResponse
from fattureincloud_python_sdk.model.get_client_response import GetClientResponse
from fattureincloud_python_sdk.model.list_clients_response import ListClientsResponse
from fattureincloud_python_sdk.model.modify_client_response import ModifyClientResponse


class TestClientsApi(unittest.TestCase):
    """ClientsApi unit test stubs"""

    def setUp(self):
        self.api = ClientsApi()
        client = Client( id=1, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" )

        self.api.create_client = unittest.mock.MagicMock(return_value = CreateClientResponse(data = client))
        self.api.delete_client = unittest.mock.MagicMock(return_value = "")
        self.api.get_client = unittest.mock.MagicMock(return_value = GetClientResponse(data = client))
        self.api.list_clients = unittest.mock.MagicMock(return_value = ListClientsResponse(data = [client, client]))
        self.api.modify_client = unittest.mock.MagicMock(return_value = ModifyClientResponse(data = client))

    def tearDown(self):
        pass

    def test_create_client(self):
        expected = CreateClientResponse(data = Client( id=2, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" ) )
        actual = self.api.create_client(2, None)
        actual.data.id = 2
        assert actual == expected
        self.api.create_client.assert_called_with(2, None)

    def test_delete_client(self):
        self.api.delete_client(12345)
        self.api.delete_client.assert_called_with(12345)

    def test_get_client(self):
        expected = GetClientResponse(data = Client( id=2, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" ) )
        actual = self.api.get_client(2, 12345)
        actual.data.id = 2
        assert actual == expected
        self.api.get_client.assert_called_with(2, 12345)

    def test_list_clients(self):
        expected = ListClientsResponse(data = [Client( id=2, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" ),Client( id=2, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" )] )
        actual = self.api.list_clients(2)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_clients.assert_called_with(2)

    def test_modify_client(self):
        expected = ModifyClientResponse(data = Client( id=2, code="123", name="Rossi S.r.l.", type=ClientType("company"), first_name="first_name_example", last_name="last_name_example", contact_person="contact_person_example", vat_number="IT01234567890", tax_code="RSSMRA44A12E890Q", address_street="Via dei tigli, 12", address_postal_code="24010", address_city="Bergamo", address_province="BG", address_extra="address_extra_example", country="Italia", email="mario.rossi@example.it", certified_email="mario.rossi@pec.example.it", phone="phone_example", fax="fax_example", notes="notes_example", default_vat=VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True, ), default_payment_terms=30, default_payment_terms_type=DefaultPaymentTermsType("standard"), default_payment_method=PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example", ), bank_name="bank_name_example", bank_iban="bank_iban_example", bank_swift_code="bank_swift_code_example", shipping_address="shipping_address_example", e_invoice=False, ei_code="ei_code_example", created_at="created_at_example", updated_at="updated_at_example" ) )
        actual = self.api.modify_client(2, 12345, None)
        actual.data.id = 2
        assert actual == expected
        self.api.modify_client.assert_called_with(2, 12345, None)


if __name__ == '__main__':
    unittest.main()
