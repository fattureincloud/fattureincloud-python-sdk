"""
    Fatture in Cloud API v2 - API Reference

    Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  # noqa: E501

    The version of the OpenAPI document: 2.0.9
    Contact: info@fattureincloud.it
    Generated by: https://openapi-generator.tech
"""


import unittest

import fattureincloud_python_sdk
from fattureincloud_python_sdk.api.info_api import InfoApi
from fattureincloud_python_sdk.model.city import City
from fattureincloud_python_sdk.model.currency import Currency
from fattureincloud_python_sdk.model.document_template import DocumentTemplate
from fattureincloud_python_sdk.model.language import Language
from fattureincloud_python_sdk.model.list_archive_categories_response import ListArchiveCategoriesResponse
from fattureincloud_python_sdk.model.list_cities_response import ListCitiesResponse
from fattureincloud_python_sdk.model.list_cost_centers_response import ListCostCentersResponse
from fattureincloud_python_sdk.model.list_countries_response import ListCountriesResponse
from fattureincloud_python_sdk.model.list_currencies_response import ListCurrenciesResponse
from fattureincloud_python_sdk.model.list_delivery_notes_default_causals_response import ListDeliveryNotesDefaultCausalsResponse
from fattureincloud_python_sdk.model.list_languages_response import ListLanguagesResponse
from fattureincloud_python_sdk.model.list_payment_accounts_response import ListPaymentAccountsResponse
from fattureincloud_python_sdk.model.list_payment_methods_response import ListPaymentMethodsResponse
from fattureincloud_python_sdk.model.list_product_categories_response import ListProductCategoriesResponse
from fattureincloud_python_sdk.model.list_received_document_categories_response import ListReceivedDocumentCategoriesResponse
from fattureincloud_python_sdk.model.list_revenue_centers_response import ListRevenueCentersResponse
from fattureincloud_python_sdk.model.list_templates_response import ListTemplatesResponse
from fattureincloud_python_sdk.model.list_units_of_measure_response import ListUnitsOfMeasureResponse
from fattureincloud_python_sdk.model.list_vat_types_response import ListVatTypesResponse
from fattureincloud_python_sdk.model.payment_account import PaymentAccount
from fattureincloud_python_sdk.model.payment_account_type import PaymentAccountType
from fattureincloud_python_sdk.model.payment_method import PaymentMethod
from fattureincloud_python_sdk.model.payment_method_details import PaymentMethodDetails
from fattureincloud_python_sdk.model.payment_method_type import PaymentMethodType
from fattureincloud_python_sdk.model.vat_type import VatType 


class TestInfoApi(unittest.TestCase):
    """InfoApi unit test stubs"""

    def setUp(self):
        self.api = InfoApi()
        self.api.list_archive_categories = unittest.mock.MagicMock(return_value = ListArchiveCategoriesResponse(data = ["cat5", "cat6"]))
        self.api.list_cities = unittest.mock.MagicMock(return_value = ListCitiesResponse(data = [City( postal_code="12345", city="BG", province="bergamo" )]))
        self.api.list_cost_centers = unittest.mock.MagicMock(return_value = ListCostCentersResponse(data = ["bg", "mi"]))
        self.api.list_countries = unittest.mock.MagicMock(return_value = ListCountriesResponse(data = ["Italia", "Albania"]))
        self.api.list_currencies = unittest.mock.MagicMock(return_value = ListCurrenciesResponse(data = [Currency( id="EUR", symbol="e", exchange_rate="1", html_symbol="EUR")]))
        self.api.list_delivery_notes_default_causals = unittest.mock.MagicMock(return_value = ListDeliveryNotesDefaultCausalsResponse(data = ["causal1", "causal2"]))
        self.api.list_languages = unittest.mock.MagicMock(return_value = ListLanguagesResponse(data = [Language( code="IT", name="Italiano" )]))
        self.api.list_payment_accounts = unittest.mock.MagicMock(return_value = ListPaymentAccountsResponse(data = [PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True )]))
        self.api.list_payment_methods = unittest.mock.MagicMock(return_value = ListPaymentMethodsResponse(data = [PaymentMethod( id=1, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example" )]))
        self.api.list_product_categories = unittest.mock.MagicMock(return_value = ListProductCategoriesResponse(data = ["cat5", "cat6"]))
        self.api.list_received_document_categories = unittest.mock.MagicMock(return_value = ListReceivedDocumentCategoriesResponse(data = ["cat5", "cat6"]))
        self.api.list_revenue_centers = unittest.mock.MagicMock(return_value = ListRevenueCentersResponse(data = ["bg", "mi"]))
        self.api.list_templates = unittest.mock.MagicMock(return_value = ListTemplatesResponse(data = [DocumentTemplate( id=123, name="Light Smoke", type="type_example" )]))
        self.api.list_units_of_measure = unittest.mock.MagicMock(return_value = ListUnitsOfMeasureResponse(data = ["kg", "km"]))
        self.api.list_vat_types = unittest.mock.MagicMock(return_value = ListVatTypesResponse(data = [VatType( id=1, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True )]))

    def tearDown(self):
        pass

    def test_list_archive_categories(self):
        expected = ListArchiveCategoriesResponse(data = ["cat7", "cat6"])
        actual = self.api.list_archive_categories(2)
        actual.data[0] = "cat7"
        assert actual == expected
        self.api.list_archive_categories.assert_called_with(2)

    def test_list_cities(self):
        expected = ListCitiesResponse(data = [City( postal_code="123456", city="BG", province="bergamo" )])
        actual = self.api.list_cities()
        actual.data[0].postal_code = "123456"
        assert actual == expected
        self.api.list_cities.assert_called_with()

    def test_list_cost_centers(self):
        expected = ListCostCentersResponse(data = ["to", "mi"])
        actual = self.api.list_cost_centers(2)
        actual.data[0] = "to"
        assert actual == expected
        self.api.list_cost_centers.assert_called_with(2)

    def test_list_countries(self):
        expected = ListCountriesResponse(data = ["Spagna", "Albania"])
        actual = self.api.list_countries()
        actual.data[0] = "Spagna"
        assert actual == expected
        self.api.list_countries.assert_called_with()

    def test_list_currencies(self):
        expected = ListCurrenciesResponse(data = [Currency( id="USD", symbol="e", exchange_rate="1", html_symbol="EUR")])
        actual = self.api.list_currencies()
        actual.data[0].id = "USD"
        assert actual == expected
        self.api.list_currencies.assert_called_with()

    def test_list_delivery_notes_default_causals(self):
        expected = ListDeliveryNotesDefaultCausalsResponse(data = ["causal3", "causal2"])
        actual = self.api.list_delivery_notes_default_causals(2)
        actual.data[0] = "causal3"
        assert actual == expected
        self.api.list_delivery_notes_default_causals.assert_called_with(2)

    def test_list_languages(self):
        expected = ListLanguagesResponse(data = [Language( code="ITA", name="Italiano" )])
        actual = self.api.list_languages()
        actual.data[0].code = "ITA"
        assert actual == expected
        self.api.list_languages.assert_called_with()

    def test_list_payment_accounts(self):
        expected = ListPaymentAccountsResponse(data = [PaymentAccount( id=2, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True )])
        actual = self.api.list_payment_accounts(2)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_payment_accounts.assert_called_with(2)

    def test_list_payment_methods(self):
        expected = ListPaymentMethodsResponse(data = [PaymentMethod( id=2, name="name_example", type=PaymentMethodType("standard"), is_default=True, default_payment_account=PaymentAccount( id=1, name="Conto Banca Intesa", type=PaymentAccountType("standard"), iban="iban_example", sia="sia_example", cuc="cuc_example", virtual=True, ), details=[ PaymentMethodDetails( title="title_example", description="description_example", ), ], bank_iban="bank_iban_example", bank_name="bank_name_example", bank_beneficiary="bank_beneficiary_example", ei_payment_method="ei_payment_method_example" )])
        actual = self.api.list_payment_methods(2)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_payment_methods.assert_called_with(2)

    def test_list_product_categories(self):
        expected = ListProductCategoriesResponse(data = ["cat7", "cat6"])
        actual = self.api.list_product_categories(2)
        actual.data[0] = "cat7"
        assert actual == expected
        self.api.list_product_categories.assert_called_with(2)

    def test_list_received_document_categories(self):
        expected = ListReceivedDocumentCategoriesResponse(data = ["cat7", "cat6"])
        actual = self.api.list_received_document_categories(2)
        actual.data[0] = "cat7"
        assert actual == expected
        self.api.list_received_document_categories.assert_called_with(2)

    def test_list_revenue_centers(self):
        expected = ListRevenueCentersResponse(data = ["to", "mi"])
        actual = self.api.list_revenue_centers(2)
        actual.data[0] = "to"
        assert actual == expected
        self.api.list_revenue_centers.assert_called_with(2)

    def test_list_templates(self):
        expected = ListTemplatesResponse(data = [DocumentTemplate( id=2, name="Light Smoke", type="type_example" )])
        actual = self.api.list_templates(2)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_templates.assert_called_with(2)

    def test_list_units_of_measure(self):
        expected = ListUnitsOfMeasureResponse(data = ["kb", "km"])
        actual = self.api.list_units_of_measure()
        actual.data[0] = "kb"
        assert actual == expected
        self.api.list_units_of_measure.assert_called_with()

    def test_list_vat_types(self):
        expected = ListVatTypesResponse(data = [VatType( id=2, value=22.0, description="Non imponibile art. 123", notes="IVA non imponibile ai sensi dell articolo 123, comma 2", e_invoice=True, ei_type="2", ei_description="ei_description_example", is_disabled=True )])
        actual = self.api.list_vat_types(2)
        actual.data[0].id = 2
        assert actual == expected
        self.api.list_vat_types.assert_called_with(2)

if __name__ == '__main__':
    unittest.main()
