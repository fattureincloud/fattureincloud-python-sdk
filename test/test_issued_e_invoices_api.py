"""
    Fatture in Cloud API v2 - API Reference

    Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  # noqa: E501

    The version of the OpenAPI document: 2.0.8
    Contact: info@fattureincloud.it
    Generated by: https://openapi-generator.tech
"""


import unittest
import unittest.mock
import fattureincloud_python_sdk
from fattureincloud_python_sdk.api.issued_e_invoices_api import IssuedEInvoicesApi
from fattureincloud_python_sdk.model.send_e_invoice_response import SendEInvoiceResponse
from fattureincloud_python_sdk.model.send_e_invoice_response_data import SendEInvoiceResponseData
from fattureincloud_python_sdk.model.verify_e_invoice_xml_response import VerifyEInvoiceXmlResponse
from fattureincloud_python_sdk.model.verify_e_invoice_xml_response_data import VerifyEInvoiceXmlResponseData
from fattureincloud_python_sdk.model.get_e_invoice_rejection_reason_response import GetEInvoiceRejectionReasonResponse
from fattureincloud_python_sdk.model.einvoice_rejection_reason import EinvoiceRejectionReason


class TestIssuedEInvoicesApi(unittest.TestCase):
    """IssuedEInvoicesApi unit test stubs"""

    def setUp(self):
        self.api = IssuedEInvoicesApi()
        
        send = SendEInvoiceResponseData( name="msg", date="2022.01.01" )
        verify = VerifyEInvoiceXmlResponseData(success=True)
        reason = EinvoiceRejectionReason(reason="invalid date")

        self.api.send_e_invoice = unittest.mock.MagicMock(return_value = SendEInvoiceResponse(data = send))
        self.api.verify_e_invoice_xml = unittest.mock.MagicMock(return_value = VerifyEInvoiceXmlResponse(data = verify))
        self.api.get_e_invoice_rejection_reason = unittest.mock.MagicMock(return_value = GetEInvoiceRejectionReasonResponse(data = reason))

    def tearDown(self):
        pass

    def test_send_e_invoice(self):
        expected = SendEInvoiceResponse(data = SendEInvoiceResponseData( name="msg2", date="2022.01.01" ))
        actual = self.api.send_e_invoice(2, None)
        actual.data.name = "msg2"
        assert actual == expected
        self.api.send_e_invoice.assert_called_with(2, None)

    def test_verify_e_invoice_xml(self):
        expected = VerifyEInvoiceXmlResponse(data = VerifyEInvoiceXmlResponseData(success=False))
        actual = self.api.verify_e_invoice_xml(2, 12345)
        actual.data.success = False
        assert actual == expected
        self.api.verify_e_invoice_xml.assert_called_with(2, 12345)

    def test_get_e_invoice_rejection_reason(self):
        expected = GetEInvoiceRejectionReasonResponse(data = EinvoiceRejectionReason(reason="invalid date2"))
        actual = self.api.get_e_invoice_rejection_reason(2, 12345)
        actual.data.reason = "invalid date2"
        assert actual == expected
        self.api.get_e_invoice_rejection_reason.assert_called_with(2, 12345)

if __name__ == '__main__':
    unittest.main()
